3.1: Weighted Directed Graph is used to implement this project. Each node in the graph is a city and each weighted directed 
	 edge is the connection between two cities. The weights of the edges are the cost of fuel spent on these trips. Using
	 DFS/ BFS to find a path from start city to the destination city. Class ConnectedCities utilizes a symbol table to associate
	 each City Object with the name of the city (String). Dijkstra's algorithm is used to find the shortest path, In order
	 to use this algorithm, I used 2 hash tables to convert all the city names (String) to integer so we can use index. A
	 minimum priority queue is used to store all the meals after we find the shortest path. Using delMin() to associate the
	 current cheapest meal with the current destination city. After we know the current city and the place where are we going
	 to have the meal, using getRestInfo to find the corresponding restaurant that is located within 0.5 degrees of latitude 
	 and 0.5 degrees of longitude of the city. All the restaurant information are stored in 3 ArrayList, one restaurant each
	 ArrayList. And lastly, we print out all destination city(edge.to()) info to output file.
	 
3.2: BFS and DFS don't return the same result.BFS finds the result in fewer steps. And this will remain true if the the number
	 of cities increases. 